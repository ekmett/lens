# This Travis job script has been generated by a script via
#
#   haskell-ci '--output=.travis.yml' '--config=cabal.haskell-ci' 'cabal.project'
#
# For more information, see https://github.com/haskell-CI/haskell-ci
#
# version: 0.3.20190814.1
#
language: c
dist: xenial
git:
  # whether to recursively clone submodules
  submodules: false
notifications:
  irc:
    channels:
      - irc.freenode.org#haskell-lens
    skip_join: true
    template:
      - "\"\\x0313lens\\x03/\\x0306%{branch}\\x03 \\x0314%{commit}\\x03 %{build_url} %{message}\""
cache:
  directories:
    - $HOME/.cabal/packages
    - $HOME/.cabal/store
before_cache:
  - rm -fv $CABALHOME/packages/hackage.haskell.org/build-reports.log
  # remove files that are regenerated by 'cabal update'
  - rm -fv $CABALHOME/packages/hackage.haskell.org/00-index.*
  - rm -fv $CABALHOME/packages/hackage.haskell.org/*.json
  - rm -fv $CABALHOME/packages/hackage.haskell.org/01-index.cache
  - rm -fv $CABALHOME/packages/hackage.haskell.org/01-index.tar
  - rm -fv $CABALHOME/packages/hackage.haskell.org/01-index.tar.idx
  - rm -rfv $CABALHOME/packages/head.hackage
matrix:
  include:
    - compiler: ghc-8.8.1
      addons: {"apt":{"sources":["hvr-ghc"],"packages":["ghc-8.8.1","cabal-install-3.0","freeglut3-dev"]}}
    - compiler: ghc-8.6.5
      addons: {"apt":{"sources":["hvr-ghc"],"packages":["ghc-8.6.5","cabal-install-2.4","freeglut3-dev"]}}
    - compiler: ghc-8.4.4
      addons: {"apt":{"sources":["hvr-ghc"],"packages":["ghc-8.4.4","cabal-install-2.4","freeglut3-dev"]}}
    - compiler: ghc-8.2.2
      addons: {"apt":{"sources":["hvr-ghc"],"packages":["ghc-8.2.2","cabal-install-2.4","freeglut3-dev"]}}
    - compiler: ghc-8.0.2
      addons: {"apt":{"sources":["hvr-ghc"],"packages":["ghc-8.0.2","cabal-install-2.4","freeglut3-dev"]}}
    - compiler: ghc-7.10.3
      addons: {"apt":{"sources":["hvr-ghc"],"packages":["ghc-7.10.3","cabal-install-2.4","freeglut3-dev"]}}
    - compiler: ghc-7.8.4
      addons: {"apt":{"sources":["hvr-ghc"],"packages":["ghc-7.8.4","cabal-install-2.4","freeglut3-dev"]}}
    - compiler: ghc-7.6.3
      addons: {"apt":{"sources":["hvr-ghc"],"packages":["ghc-7.6.3","cabal-install-2.4","freeglut3-dev"]}}
    - compiler: ghc-7.4.2
      addons: {"apt":{"sources":["hvr-ghc"],"packages":["ghc-7.4.2","cabal-install-2.4","freeglut3-dev"]}}
    - compiler: ghc-head
      addons: {"apt":{"sources":["hvr-ghc"],"packages":["ghc-head","cabal-install-head","freeglut3-dev"]}}
  allow_failures:
    - compiler: ghc-head
    - compiler: ghc-8.8.1
before_install:
  - HC=$(echo "/opt/$CC/bin/ghc" | sed 's/-/\//')
  - WITHCOMPILER="-w $HC"
  - HCPKG="$HC-pkg"
  - unset CC
  - CABAL=/opt/ghc/bin/cabal
  - CABALHOME=$HOME/.cabal
  - export PATH="$CABALHOME/bin:$PATH"
  - TOP=$(pwd)
  - "HCNUMVER=$(${HC} --numeric-version|perl -ne '/^(\\d+)\\.(\\d+)\\.(\\d+)(\\.(\\d+))?$/; print(10000 * $1 + 100 * $2 + ($3 == 0 ? $5 != 1 : $3))')"
  - echo $HCNUMVER
  - CABAL="$CABAL -vnormal+nowrap+markoutput"
  - set -o pipefail
  - |
    echo 'function blue(s) { printf "\033[0;34m" s "\033[0m " }'           >> .colorful.awk
    echo 'BEGIN { state = "output"; }'                                     >> .colorful.awk
    echo '/^-----BEGIN CABAL OUTPUT-----$/ { state = "cabal" }'            >> .colorful.awk
    echo '/^-----END CABAL OUTPUT-----$/ { state = "output" }'             >> .colorful.awk
    echo '!/^(-----BEGIN CABAL OUTPUT-----|-----END CABAL OUTPUT-----)/ {' >> .colorful.awk
    echo '  if (state == "cabal") {'                                       >> .colorful.awk
    echo '    print blue($0)'                                              >> .colorful.awk
    echo '  } else {'                                                      >> .colorful.awk
    echo '    print $0'                                                    >> .colorful.awk
    echo '  }'                                                             >> .colorful.awk
    echo '}'                                                               >> .colorful.awk
  - cat .colorful.awk
  - |
    color_cabal_output () {
      awk -f $TOP/.colorful.awk
    }
  - echo text | color_cabal_output
install:
  - ${CABAL} --version
  - echo "$(${HC} --version) [$(${HC} --print-project-git-commit-id 2> /dev/null || echo '?')]"
  - TEST=--enable-tests
  - BENCH=--enable-benchmarks
  - HEADHACKAGE=false
  - if [ $HCNUMVER -ge 80800 ] ; then HEADHACKAGE=true ; fi
  - rm -f $CABALHOME/config
  - |
    echo "verbose: normal +nowrap +markoutput"          >> $CABALHOME/config
    echo "remote-build-reporting: anonymous"            >> $CABALHOME/config
    echo "write-ghc-environment-files: always"          >> $CABALHOME/config
    echo "remote-repo-cache: $CABALHOME/packages"       >> $CABALHOME/config
    echo "logs-dir:          $CABALHOME/logs"           >> $CABALHOME/config
    echo "world-file:        $CABALHOME/world"          >> $CABALHOME/config
    echo "extra-prog-path:   $CABALHOME/bin"            >> $CABALHOME/config
    echo "symlink-bindir:    $CABALHOME/bin"            >> $CABALHOME/config
    echo "installdir:        $CABALHOME/bin"            >> $CABALHOME/config
    echo "build-summary:     $CABALHOME/logs/build.log" >> $CABALHOME/config
    echo "store-dir:         $CABALHOME/store"          >> $CABALHOME/config
    echo "install-dirs user"                            >> $CABALHOME/config
    echo "  prefix: $CABALHOME"                         >> $CABALHOME/config
    echo "repository hackage.haskell.org"               >> $CABALHOME/config
    echo "  url: http://hackage.haskell.org/"           >> $CABALHOME/config
  - |
    if $HEADHACKAGE; then
    echo "allow-newer: $($HCPKG list --simple-output | sed -E 's/([a-zA-Z-]+)-[0-9.]+/*:\1/g')" >> $CABALHOME/config
    echo "repository head.hackage.ghc.haskell.org"                                        >> $CABALHOME/config
    echo "   url: https://ghc.gitlab.haskell.org/head.hackage/"                           >> $CABALHOME/config
    echo "   secure: True"                                                                >> $CABALHOME/config
    echo "   root-keys: 7541f32a4ccca4f97aea3b22f5e593ba2c0267546016b992dfadcd2fe944e55d" >> $CABALHOME/config
    echo "              26021a13b401500c8eb2761ca95c61f2d625bfef951b939a8124ed12ecf07329" >> $CABALHOME/config
    echo "              f76d08be13e9a61a377a85e2fb63f4c5435d40f8feb3e12eb05905edb8cdea89" >> $CABALHOME/config
    echo "   key-threshold: 3"                                                            >> $CABALHOME/config
    fi
  - cat $CABALHOME/config
  - rm -fv cabal.project cabal.project.local cabal.project.freeze
  - travis_retry ${CABAL} v2-update -v
  - if [ $HCNUMVER -ge 80600 ] && [ $HCNUMVER -lt 80800 ] ; then ${CABAL} v2-install $WITHCOMPILER -j2 hlint --constraint='hlint ==2.1.*' | color_cabal_output ; fi
  # Generate cabal.project
  - rm -rf cabal.project cabal.project.local cabal.project.freeze
  - touch cabal.project
  - |
    echo "packages: ." >> cabal.project
    echo "packages: ./examples" >> cabal.project
    echo "packages: ./lens-properties" >> cabal.project
  - |
  - "for pkg in $($HCPKG list --simple-output); do echo $pkg | sed 's/-[^-]*$//' | (grep -vE -- '^(lens|lens-examples|lens-properties)$' || true) | sed 's/^/constraints: /' | sed 's/$/ installed/' >> cabal.project.local; done"
  - cat cabal.project || true
  - cat cabal.project.local || true
  - if [ -f "./configure.ac" ]; then (cd "." && autoreconf -i); fi
  - if [ -f "./examples/configure.ac" ]; then (cd "./examples" && autoreconf -i); fi
  - if [ -f "./lens-properties/configure.ac" ]; then (cd "./lens-properties" && autoreconf -i); fi
  - ${CABAL} v2-freeze $WITHCOMPILER ${TEST} ${BENCH} | color_cabal_output
  - "cat cabal.project.freeze | sed -E 's/^(constraints: *| *)//' | sed 's/any.//'"
  - rm  cabal.project.freeze
  - ${CABAL} v2-build $WITHCOMPILER ${TEST} ${BENCH} --dep -j2 all | color_cabal_output
script:
  - DISTDIR=$(mktemp -d /tmp/dist-test.XXXX)
  # Packaging...
  - ${CABAL} v2-sdist all | color_cabal_output
  # Unpacking...
  - mv dist-newstyle/sdist/*.tar.gz ${DISTDIR}/
  - cd ${DISTDIR} || false
  - find . -maxdepth 1 -type f -name '*.tar.gz' -exec tar -xvf '{}' \;
  - find . -maxdepth 1 -type f -name '*.tar.gz' -exec rm       '{}' \;
  - PKGDIR_lens="$(find . -maxdepth 1 -type d -regex '.*/lens-[0-9.]*')"
  - PKGDIR_lens_examples="$(find . -maxdepth 1 -type d -regex '.*/lens-examples-[0-9.]*')"
  - PKGDIR_lens_properties="$(find . -maxdepth 1 -type d -regex '.*/lens-properties-[0-9.]*')"
  # Generate cabal.project
  - rm -rf cabal.project cabal.project.local cabal.project.freeze
  - touch cabal.project
  - |
    echo "packages: ${PKGDIR_lens}" >> cabal.project
    echo "packages: ${PKGDIR_lens_examples}" >> cabal.project
    echo "packages: ${PKGDIR_lens_properties}" >> cabal.project
  - |
  - "for pkg in $($HCPKG list --simple-output); do echo $pkg | sed 's/-[^-]*$//' | (grep -vE -- '^(lens|lens-examples|lens-properties)$' || true) | sed 's/^/constraints: /' | sed 's/$/ installed/' >> cabal.project.local; done"
  - cat cabal.project || true
  - cat cabal.project.local || true
  # Building with tests and benchmarks...
  # build & run tests, build benchmarks
  - ${CABAL} v2-build $WITHCOMPILER ${TEST} ${BENCH} all | color_cabal_output
  # Testing...
  - ${CABAL} v2-test $WITHCOMPILER ${TEST} ${BENCH} all | color_cabal_output
  # HLint..
  - if [ $HCNUMVER -ge 80600 ] && [ $HCNUMVER -lt 80800 ] ; then (cd ${PKGDIR_lens} && hlint src) ; fi
  - if [ $HCNUMVER -ge 80600 ] && [ $HCNUMVER -lt 80800 ] ; then (cd ${PKGDIR_lens_examples} && hlint .) ; fi
  - if [ $HCNUMVER -ge 80600 ] && [ $HCNUMVER -lt 80800 ] ; then (cd ${PKGDIR_lens_properties} && hlint src) ; fi
  # cabal check...
  - (cd ${PKGDIR_lens} && ${CABAL} -vnormal check)
  - (cd ${PKGDIR_lens_examples} && ${CABAL} -vnormal check)
  - (cd ${PKGDIR_lens_properties} && ${CABAL} -vnormal check)
  # haddock...
  - ${CABAL} v2-haddock $WITHCOMPILER ${TEST} ${BENCH} all | color_cabal_output

# REGENDATA ["--output=.travis.yml","--config=cabal.haskell-ci","cabal.project"]
# EOF
